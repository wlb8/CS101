"""
Willem Battey
wlbqx8@umsystem.edu
lab 9
Algorithm:
1. For each action the user can do create a function for it
2. Make a list to add the scores to respectivley
3. Make a try and except for all the values where if a valueerror returns then return n/a
4. Format the output correctly using 15 8
5. For average just do regular averages
6. Weighted mulitply the grades by the weight then add them together
7. Standard deviation use the formula given"""


import math

def print_menu():
    print("{:^30}".format("Grade Menu"))
    print("1 - Add Test")
    print("2 - Remove Test")
    print("3 - Clear Tests")
    print("4 - Add Assignment")
    print("5 - Remove Assignment")
    print("6 - Clear Assignments")
    print("D - Display Scores")
    print("7 - Quit")



def weighted_avg(tests, assigns):
    '''60% of the grade. Needs to show n/a when no info is present'''
    test_w = 0
    assign_w = 0
    for x in tests:
        test_w = (x * .6) + test_w
    for x in assigns:
        assign_w = (x* .6) + assign_w
    weighted = (test_w + assign_w)
    return weighted



def avg(scores):
    '''Gets the average of the scores'''
    try:
        total=0
        for x in scores:
            total = total + x
            median = total/(len(scores))
        return median
    except UnboundLocalError:
        return 'n/a'
def standard(scores):
    '''Gets the standard deviation of the scores'''
    try:
        total = 0
        av = avg(scores)
        for x in scores:
            valav = (x + av)
            valav_div_4 = valav / 4
            std = math.sqrt(valav_div_4)
        return std
    except UnboundLocalError:
        return 'n/a'
def add_score_test(test_scores):
    '''Adds score to the list of scores'''
    try:
        score = int(input("Enter the new test score 0 - 100: "))
        while score < 0 and score > 100:
            print("Please enter a score between 0 - 100")
            score = int(input("Enter the new test score 0 - 100"))
            if score > 0 and score < 100:
                test_scores.append(score)
        test_scores.append(score)
        return test_scores
    except ValueError:
        print("Please enter a integer")
def remove_score_test(test_scores):
    '''Removes score from the list of scores'''

    score = int(input("Enter the score you would like to remove: "))   
    if score in test_scores:
        test_scores.remove(score)
    else:
        print("That score does not exist")
    return test_scores


def clear_tests(test_scores):
    '''Removes all scores in the test list'''

    test_scores.clear()
    return test_scores


def add_assignment(assignmentscores):
    '''Adds assignemnt score to the list of scores'''
    try:
        score = int(input("Enter the new assignment score 0 - 100: "))
        while score < 0 and score > 100:
            print("Please enter a score between 0 - 100")
            score = int(input("Enter the new assignemnt score 0 - 100: "))
            if score > 0 and score < 100:
                assignmentscores.append(score)
        assignmentscores.append(score)
        return assignmentscores
    except ValueError:
        print("Please enter a valid integer")


def remove_assignment(assignmentscores):
    '''Removes assingment score from the list of scores'''
    try:
        score = int(input("Enter the score you would like to remove: "))
        if score in assignmentscores:
            assignmentscores.remove(score)
            return assignmentscores
        else:
            print("That score does not exist")
    except ValueError:
        print("Please enter a valid integer")

def clear_assignemnts(assignmentscores):
    '''Removes all assingment scores from the list'''

    assignmentscores.clear()
    return assignmentscores



if __name__ == "__main__":
    test_scores=[]
    assignmentscores=[]

    Grades={
        "Tests":[0, 'n/a', 'n/a', 'n/a', 'n/a'],
        "Assignemtns":[0, 'n/a', 'n/a', 'n/a', 'n/a']
    }
    user_input = 'y'
    while user_input not in ("Q", 'q'):
        print_menu()
        user_input = input()
        if user_input not in ('1', '2') or ('3','4') or ('5', '6') or ('D'):
            print("Please enter one of the given options")
        if user_input == '1':
            add_score_test(test_scores)
        elif user_input == '2':
            remove_score_test(test_scores)
        elif user_input == '3':
            clear_tests(test_scores)
            print("All test scores have been cleared")
        elif user_input == '4':
            add_assignment(assignmentscores)
        elif user_input == '5':
            remove_assignment(assignmentscores)
        elif user_input == '6':
            clear_assignemnts(assignmentscores)
            print("All assignments have been cleared")
        elif user_input in ('D', 'd'):
            try:
                max_test = max(test_scores)
            except ValueError:
                max_test = 'n/a'
            try:
                min_test = min(test_scores)
            except ValueError:
                min_test = 'n/a'
            try:
                max_assign = max(assignmentscores)
            except ValueError:
                max_assign = 'n/a'
            try:
                min_assign = min(assignmentscores)
            except ValueError:
                min_assign = 'n/a'
            try:    
                avg_test_score = avg(test_scores)
            except ValueError:
                avg_test_score = 'n/a'
            try:
                avg_assign_score = avg(assignmentscores)
            except ValueError:
                avg_assign_score = 'n/a'
            try:
                std_test = standard(test_scores)
            except ValueError:
                std_test = 'n/a'
            try:
                std_assign = standard(assignmentscores)
            except ValueError:
                std_assign = 'n/a'

            print("{:<15} {:<8} {:<8} {:<8} {:<8}".format("Type", "#", "min", "max", "avg", "std"))
            print("============================================================")
            try:
                print("{:<15} {:<8} {:<8} {:<8.2f} {:<8.2f}".format("Tests:", min_test, max_test, avg_test_score, std_test))
            except ValueError:
                print("{:<15} {:<8} {:<8} {:<8} {:<8}".format("Tests:", min_test, max_test, avg_test_score, std_test))
            try:
                print("{:<15} {:<8} {:<8} {:<8.2f} {:<8.2f}".format("Programs:", min_assign, max_assign, avg_assign_score, std_assign))
            except ValueError:
                print("{:<15} {:<8} {:<8} {:<8} {:<8}".format("Programs:", min_assign, max_assign, avg_assign_score, std_assign))
            print('')
            print("Your weighted average is: ", weighted_avg(test_scores, assignmentscores))
        elif user_input in ('Q', 'q'):
            exit()
    
